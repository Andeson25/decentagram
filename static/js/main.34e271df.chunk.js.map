{"version":3,"sources":["helpers/meta-mask.helper.ts","services/ethereum.service.ts","models/base.contract.ts","models/decentagram.contract.ts","components/main.component.tsx","components/app.component.tsx","index.tsx"],"names":["isMetaMaskInstalled","Boolean","window","isMetaMask","EthereumService","ethereum","ETHEREUM","WEB3","_account","BehaviorSubject","undefined","_balance","_network","_isReady","ReplaySubject","this","Web3","_init","then","on","asObservable","contractConstructor","getValue","next","enable","eth","getBalance","selectedAddress","balance","Number","utils","fromWei","networkVersion","getInstance","Contract","instance","Error","BaseContract","abi","address","getContractConstructor","DecentagramContract","network","DecentagramJSON","networks","MainComponent","useState","loading","setLoading","account","setAccount","setNetwork","setBalance","contractName","setContractName","ethereumService","useMemo","decentagramContract","contractFactory","e","useEffect","subscription","pipe","withLatestFrom","subscribe","methods","name","call","unsubscribe","className","AppComponent","isReady","onClick","Onboarding","forwarderMode","forwarderOrigin","location","origin","startOnboarding","render","document","getElementById"],"mappings":"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","file":"static/js/main.34e271df.chunk.js","sourcesContent":["export function isMetaMaskInstalled(): boolean {\n    return Boolean(window['ethereum'] && window['ethereum'].isMetaMask);\n}\n","import Web3 from 'web3';\nimport {IpcProvider} from 'web3-core';\nimport {Contract} from 'web3-eth-contract';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {Constructor} from '../models/helper-types/constructor.type';\nimport {BaseContract} from '../models/base.contract';\n\nexport class EthereumService {\n    public static instance: EthereumService;\n    private readonly ETHEREUM: IpcProvider & any;\n    private readonly WEB3: Web3;\n\n    private _account: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get account(): Observable<string> {\n        return this._account.asObservable();\n    }\n\n    private _balance: BehaviorSubject<number> = new BehaviorSubject(undefined);\n\n    public get balance(): Observable<number> {\n        return this._balance.asObservable();\n    }\n\n    private _network: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get network(): Observable<string> {\n        return this._network.asObservable();\n    }\n\n    private _isReady: ReplaySubject<boolean> = new ReplaySubject();\n\n    public get isReady(): Observable<boolean> {\n        return this._isReady.asObservable();\n    }\n\n    constructor(ethereum: IpcProvider) {\n        if (isMetaMaskInstalled()) {\n            this.ETHEREUM = ethereum;\n            this.WEB3 = new Web3(this.ETHEREUM);\n            this._init()\n                .then(() => {\n                    this.ETHEREUM.on('accountsChanged', () => this._init());\n                    this.ETHEREUM.on('networkChanged', () => this._init());\n                });\n        }\n    }\n\n    public static getContractConstructor(): Constructor<Contract> {\n        if (isMetaMaskInstalled()) {\n            return EthereumService.getInstance().WEB3.eth.Contract;\n        } else {\n            return null;\n        }\n    };\n\n    public static getInstance(): EthereumService {\n        if (isMetaMaskInstalled()) {\n            if (!EthereumService.instance) {\n                EthereumService.instance = new EthereumService(window['ethereum'] as IpcProvider);\n            }\n            return EthereumService.instance;\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n\n    public contractFactory<T extends BaseContract>(contractConstructor: Constructor<T & BaseContract>): T & BaseContract {\n        return new contractConstructor(this._network.getValue());\n    }\n\n    private _init(): Promise<void> {\n        this._isReady.next(false);\n        return this.ETHEREUM.enable()\n            .then(() => this.WEB3.eth.getBalance(this.ETHEREUM.selectedAddress))\n            .then((balance: string) => {\n                this._account.next(this.ETHEREUM.selectedAddress);\n                this._balance.next(Number(this.WEB3.utils.fromWei(balance, 'ether')));\n                this._network.next(this.ETHEREUM.networkVersion);\n                this._isReady.next(true);\n            });\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {EthereumService} from '../services/ethereum.service';\n\nexport abstract class BaseContract extends EthereumService.getContractConstructor() {\n    protected constructor(abi: AbiItem[], address: string) {\n        if (isMetaMaskInstalled()) {\n            super(abi, address);\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {BaseContract} from './base.contract';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\n\nimport DecentagramJSON from '../abis/Decentagram.json';\n\nexport class DecentagramContract extends BaseContract {\n    constructor(network: string) {\n        if (!isMetaMaskInstalled()) {\n            throw new Error('Meta Mask is not installed');\n        }\n\n        const abi: AbiItem[] = DecentagramJSON.abi as AbiItem[];\n        const address: string = DecentagramJSON.networks[network] && DecentagramJSON.networks[network].address;\n        if (address && abi) {\n            super(abi, address);\n        } else {\n            throw new Error('Decentagram contract not deployed to detected network.');\n        }\n    }\n}\n","import {Fragment, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport {Subscription} from 'rxjs';\nimport {withLatestFrom} from 'rxjs/operators';\n\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {EthereumService} from '../services/ethereum.service';\nimport {DecentagramContract} from '../models/decentagram.contract';\n\nexport function MainComponent(): FunctionComponentElement<any> {\n    const [loading, setLoading]: UseState<boolean> = useState(false);\n    const [account, setAccount]: UseState<string> = useState('');\n    const [network, setNetwork]: UseState<string> = useState('');\n    const [balance, setBalance]: UseState<number> = useState(0);\n    const [contractName, setContractName]: UseState<string> = useState('');\n\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const decentagramContract: DecentagramContract = useMemo(() => {\n            try {\n                return ethereumService.contractFactory(DecentagramContract);\n            } catch (e) {\n                return null;\n            }\n        },\n        [ethereumService]\n    );\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.account\n            .pipe(withLatestFrom(ethereumService.network, ethereumService.balance))\n            .subscribe(([account, network, balance]: [string, string, number]) => {\n                setAccount(account);\n                setNetwork(network);\n                setBalance(balance);\n            });\n\n        if (decentagramContract) {\n            setLoading(true);\n            decentagramContract.methods.name().call()\n                .then((name: string) => setContractName(name))\n                .then(() => setLoading(false));\n        }\n        return () => {\n            subscription.unsubscribe();\n        };\n    }, [ethereumService, decentagramContract]);\n\n    if (loading) {\n        return (\n            <div className=\"spinner-border\"></div>\n        );\n    }\n\n    const renderContract = () => {\n        if (decentagramContract) {\n            return (\n                <Fragment>\n                    Contract name: {contractName}\n                </Fragment>\n            );\n        }\n\n        return (\n            <Fragment>\n                Decentagram contract not deployed to detected network.\n            </Fragment>\n        );\n    };\n\n    return (\n        <Fragment>\n            <div className=\"row  justify-content-center\">\n                Network: {network}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Account: {account}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Balance: {balance} ETH\n            </div>\n            <div className=\"row justify-content-center\">\n                {renderContract()}\n            </div>\n        </Fragment>\n    );\n}\n","import {Subscription} from 'rxjs';\nimport {FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport Onboarding from '@metamask/onboarding';\n\nimport {EthereumService} from '../services/ethereum.service';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {MainComponent} from './main.component';\n\nexport function AppComponent(): FunctionComponentElement<any> {\n    const [loading, setLoading]: UseState<boolean> = useState(true);\n\n    const ethereumService: EthereumService = useMemo(() => {\n        try {\n            return EthereumService.getInstance();\n        } catch (e) {\n            return null;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (ethereumService) {\n            const subscription: Subscription = ethereumService.isReady\n                .subscribe((isReady: boolean) => {\n                    setLoading(!isReady);\n                });\n            return () => {\n                subscription.unsubscribe();\n            };\n        }\n    }, [ethereumService]);\n\n    const installMetaMask = () => {\n        new Onboarding({\n            forwarderMode: 'INJECT',\n            forwarderOrigin: window.location.origin\n        })\n            .startOnboarding();\n    };\n\n    if (!isMetaMaskInstalled() || !ethereumService) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                <button className=\"btn btn-success\" onClick={installMetaMask}>Install MetaMask</button>\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                <div className=\"spinner-border\"></div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"py-5\">\n            <div className=\"container bg-light py-5 text-center\">\n                <MainComponent/>\n            </div>\n        </div>\n    );\n}\n","import {render} from 'react-dom';\n\nimport {AppComponent} from './components/app.component';\n\nimport './assets/styles/styles.scss';\n\nrender(<AppComponent/>, document.getElementById('root'));\n"],"sourceRoot":""}