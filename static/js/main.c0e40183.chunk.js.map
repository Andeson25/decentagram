{"version":3,"sources":["helpers/meta-mask.helper.ts","services/ethereum.service.ts","models/base.contract.ts","models/decentagram.contract.ts","components/main.component.tsx","components/header.component.tsx","components/app.component.tsx","index.tsx"],"names":["isMetaMaskInstalled","Boolean","window","isMetaMask","EthereumService","ethereum","ETHEREUM","WEB3","_account","BehaviorSubject","undefined","_balance","_network","_isReady","ReplaySubject","this","Web3","_init","then","on","asObservable","contractConstructor","getValue","next","enable","eth","getBalance","selectedAddress","balance","Number","utils","fromWei","networkVersion","getInstance","Contract","instance","Error","BaseContract","abi","address","getContractConstructor","DecentagramContract","network","DecentagramJSON","networks","MainComponent","useState","loading","setLoading","contractName","setContractName","image","setImage","ethereumService","useMemo","decentagramContract","contractFactory","e","useEffect","methods","name","call","className","onSubmit","event","a","preventDefault","formData","FormData","target","_toBase64","get","form","description","console","log","setTimeout","reset","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","result","onerror","error","htmlFor","onChange","URL","createObjectURL","files","type","id","src","alt","style","maxHeight","HeaderComponent","account","AppComponent","setAccount","setNetwork","setBalance","subscription","isReady","pipe","withLatestFrom","subscribe","unsubscribe","onClick","Onboarding","forwarderMode","forwarderOrigin","location","origin","startOnboarding","render","document","getElementById"],"mappings":"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","file":"static/js/main.c0e40183.chunk.js","sourcesContent":["export function isMetaMaskInstalled(): boolean {\n    return Boolean(window['ethereum'] && window['ethereum'].isMetaMask);\n}\n","import Web3 from 'web3';\nimport {IpcProvider} from 'web3-core';\nimport {Contract} from 'web3-eth-contract';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {Constructor} from '../models/helper-types/constructor.type';\nimport {BaseContract} from '../models/base.contract';\n\nexport class EthereumService {\n    public static instance: EthereumService;\n    private readonly ETHEREUM: IpcProvider & any;\n    private readonly WEB3: Web3;\n\n    private _account: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get account(): Observable<string> {\n        return this._account.asObservable();\n    }\n\n    private _balance: BehaviorSubject<number> = new BehaviorSubject(undefined);\n\n    public get balance(): Observable<number> {\n        return this._balance.asObservable();\n    }\n\n    private _network: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get network(): Observable<string> {\n        return this._network.asObservable();\n    }\n\n    private _isReady: ReplaySubject<boolean> = new ReplaySubject();\n\n    public get isReady(): Observable<boolean> {\n        return this._isReady.asObservable();\n    }\n\n    constructor(ethereum: IpcProvider) {\n        if (isMetaMaskInstalled()) {\n            this.ETHEREUM = ethereum;\n            this.WEB3 = new Web3(this.ETHEREUM);\n            this._init()\n                .then(() => {\n                    this.ETHEREUM.on('accountsChanged', () => this._init());\n                    this.ETHEREUM.on('networkChanged', () => this._init());\n                });\n        }\n    }\n\n    public static getContractConstructor(): Constructor<Contract> {\n        if (isMetaMaskInstalled()) {\n            return EthereumService.getInstance().WEB3.eth.Contract;\n        } else {\n            return null;\n        }\n    };\n\n    public static getInstance(): EthereumService {\n        if (isMetaMaskInstalled()) {\n            if (!EthereumService.instance) {\n                EthereumService.instance = new EthereumService(window['ethereum'] as IpcProvider);\n            }\n            return EthereumService.instance;\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n\n    public contractFactory<T extends BaseContract>(contractConstructor: Constructor<T & BaseContract>): T & BaseContract {\n        return new contractConstructor(this._network.getValue());\n    }\n\n    private _init(): Promise<void> {\n        this._isReady.next(false);\n        return this.ETHEREUM.enable()\n            .then(() => this.WEB3.eth.getBalance(this.ETHEREUM.selectedAddress))\n            .then((balance: string) => {\n                this._account.next(this.ETHEREUM.selectedAddress);\n                this._balance.next(Number(this.WEB3.utils.fromWei(balance, 'ether')));\n                this._network.next(this.ETHEREUM.networkVersion);\n                this._isReady.next(true);\n            });\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {EthereumService} from '../services/ethereum.service';\n\nexport abstract class BaseContract extends EthereumService.getContractConstructor() {\n    protected constructor(abi: AbiItem[], address: string) {\n        if (isMetaMaskInstalled()) {\n            super(abi, address);\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {BaseContract} from './base.contract';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\n\nimport DecentagramJSON from '../abis/Decentagram.json';\n\nexport class DecentagramContract extends BaseContract {\n    constructor(network: string) {\n        if (!isMetaMaskInstalled()) {\n            throw new Error('Meta Mask is not installed');\n        }\n\n        const abi: AbiItem[] = DecentagramJSON.abi as AbiItem[];\n        const address: string = DecentagramJSON.networks[network] && DecentagramJSON.networks[network].address;\n        if (address && abi) {\n            super(abi, address);\n        } else {\n            throw new Error('Decentagram contract not deployed to detected network.');\n        }\n    }\n}\n","import {FormEvent, FormEventHandler, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\n\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {EthereumService} from '../services/ethereum.service';\nimport {DecentagramContract} from '../models/decentagram.contract';\n\ntype FormType = { image: string; description: string };\n\nexport function MainComponent(): FunctionComponentElement<any> {\n    const [loading, setLoading]: UseState<boolean> = useState(false);\n    const [contractName, setContractName]: UseState<string> = useState('');\n    const [image, setImage]: UseState<string> = useState('');\n\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const decentagramContract: DecentagramContract = useMemo(() => {\n            try {\n                return ethereumService.contractFactory(DecentagramContract);\n            } catch (e) {\n                return null;\n            }\n        },\n        [ethereumService]\n    );\n\n    useEffect(() => {\n        if (decentagramContract) {\n            setLoading(true);\n            decentagramContract.methods.name().call()\n                .then((name: string) => setContractName(name))\n                .then(() => setLoading(false));\n        }\n    }, [ethereumService, decentagramContract]);\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light py-5 text-center\">\n                <div className=\"spinner-border\"/>\n            </div>\n        );\n    }\n\n    if (!decentagramContract) {\n        return (\n            <div className=\"container bg-light py-5 text-center\">\n                Decentagram contract not deployed to detected network.\n            </div>\n        );\n    }\n\n    const onImageChange = ({target}: { target: HTMLInputElement }) => {\n        setImage(URL.createObjectURL(target.files[0]));\n    };\n\n    const onSubmit: FormEventHandler<HTMLFormElement> = async (event: FormEvent) => {\n        event.preventDefault();\n        setLoading(true);\n\n        const formData: FormData = new FormData(event.target as HTMLFormElement);\n        const form: FormType = {\n            image: await _toBase64(formData.get('image') as File),\n            description: formData.get('description') as string\n        };\n\n        console.log(form);\n        setTimeout(() => setLoading(false), 2000);\n\n        (event.target as HTMLFormElement).reset();\n        setImage(null);\n    };\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    // const _toFile = (buffer: string): Promise<File> => {\n    //     const type: string = buffer.split('data:')[1].split(';')[0].trim()\n    //\n    //     return fetch(buffer)\n    //         .then((res: Body) => res.blob())\n    //         .then((blob: Blob) => {\n    //             return new File([blob], \"File name\", {type})\n    //         })\n    // }\n\n    const _toBase64 = (file: File): Promise<string> => {\n        return new Promise((resolve, reject) => {\n            const reader = new FileReader();\n            reader.readAsDataURL(file);\n            reader.onload = () => resolve(reader.result as string);\n            reader.onerror = error => reject(error);\n        });\n    };\n\n    return (\n        <form onSubmit={onSubmit} className=\"container bg-light py-5\">\n            <div className=\"form-group text-center\">\n                {contractName}\n            </div>\n            <div className=\"form-group text-center\">\n                <label htmlFor=\"image\" className=\"m-0  btn btn-lg btn-secondary\">Upload photo</label>\n                <input onChange={onImageChange} className=\"d-none\" type=\"file\" name=\"image\" id=\"image\"/>\n            </div>\n            {\n                image\n                    ?\n                    <div className=\"form-group text-center\">\n                        <img src={image} alt=\"none\" style={{maxHeight: '300px'}}/>\n                    </div>\n                    :\n                    null\n            }\n            <div className=\"form-group\">\n                <label htmlFor=\"description\">Description</label>\n                <textarea name=\"description\" id=\"description\" className=\"form-control\"/>\n            </div>\n            <div className=\"form-group text-center mb-0\">\n                <button className=\"btn btn-success\" type=\"submit\">Upload</button>\n            </div>\n        </form>\n    );\n}\n","import {FunctionComponentElement} from 'react';\n\ntype PropsType = { account: string, network: string, balance: number };\n\nexport function HeaderComponent({account, network, balance}: PropsType): FunctionComponentElement<PropsType> {\n    return (\n        <nav className=\"navbar navbar-light bg-light\">\n            <div className=\"container\">\n                <div className=\"ml-auto d-flex justify-content-around\">\n                    <div className=\"mx-2\">\n                        Network: {network}\n                    </div>\n                    <div className=\"mx-2\">\n                        Account: {account}\n                    </div>\n                    <div className=\"mx-2\">\n                        Balance: {balance} ETH\n                    </div>\n                </div>\n            </div>\n        </nav>\n    );\n}\n","import {Fragment, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport {Subscription} from 'rxjs';\nimport {withLatestFrom} from 'rxjs/operators';\nimport Onboarding from '@metamask/onboarding';\n\nimport {EthereumService} from '../services/ethereum.service';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {MainComponent} from './main.component';\nimport {HeaderComponent} from './header.component';\n\nexport function AppComponent(): FunctionComponentElement<any> {\n    const [loading, setLoading]: UseState<boolean> = useState(true);\n    const [account, setAccount]: UseState<string> = useState();\n    const [network, setNetwork]: UseState<string> = useState();\n    const [balance, setBalance]: UseState<number> = useState();\n\n    const ethereumService: EthereumService = useMemo(() => {\n        try {\n            return EthereumService.getInstance();\n        } catch (e) {\n            return null;\n        }\n    }, []);\n\n    useEffect(() => {\n        if (ethereumService) {\n            const subscription: Subscription = ethereumService.isReady\n                .pipe(\n                    withLatestFrom(\n                        ethereumService.account,\n                        ethereumService.network,\n                        ethereumService.balance\n                    )\n                )\n                .subscribe(([isReady, account, network, balance]: [boolean, string, string, number]) => {\n                    setAccount(account);\n                    setNetwork(network);\n                    setBalance(balance);\n                    setLoading(!isReady);\n                });\n            return () => {\n                subscription.unsubscribe();\n            };\n        }\n    }, [ethereumService]);\n\n    const installMetaMask = () => {\n        new Onboarding({\n            forwarderMode: 'INJECT',\n            forwarderOrigin: window.location.origin\n        })\n            .startOnboarding();\n    };\n\n    if (!isMetaMaskInstalled() || !ethereumService) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                <button className=\"btn btn-success\" onClick={installMetaMask}>Install MetaMask</button>\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                <div className=\"spinner-border\"/>\n            </div>\n        );\n    }\n\n    return (\n        <Fragment>\n            <HeaderComponent account={account} network={network} balance={balance}/>\n            <div className=\"py-5\">\n                <MainComponent/>\n            </div>\n        </Fragment>\n    );\n}\n","import {render} from 'react-dom';\n\nimport {AppComponent} from './components/app.component';\n\nimport './assets/styles/styles.scss';\n\nrender(<AppComponent/>, document.getElementById('root'));\n"],"sourceRoot":""}