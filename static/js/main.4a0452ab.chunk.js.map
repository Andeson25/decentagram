{"version":3,"sources":["enums/network-type.enum.ts","helpers/meta-mask.helper.ts","services/ethereum.service.ts","models/decentagram.contract.ts","models/base.contract.ts","components/main.component.tsx","components/app.component.tsx","index.tsx"],"names":["NetworkType","NetworkNameType","isMetaMaskInstalled","Boolean","window","isMetaMask","EthereumService","ethereum","ETHEREUM","WEB3","_account","BehaviorSubject","undefined","_chain","_network","_isReady","ReplaySubject","this","Web3","next","networkVersion","request","method","then","chain","account","on","_onAccountChange","_onChainChange","network","asObservable","chainId","Ropsten","contractConstructor","getValue","enable","eth","getAccounts","instance","Error","DecentagramContract","web3","abi","DecentagramAbi","address","networks","console","log","Object","assign","Contract","MainComponent","ethereumService","useMemo","getInstance","useState","setAccount","error","setError","setChain","decentagramContract","contractFactory","e","useEffect","subscription","pipe","withLatestFrom","subscribe","unsubscribe","className","message","AppComponent","loading","setLoading","isReady","isTestNetwork","render","document","getElementById"],"mappings":"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","file":"static/js/main.4a0452ab.chunk.js","sourcesContent":["export enum NetworkType {\n    Mainnet = '0x1',\n    Ropsten = '0x3',\n    Kovan = '0x2a',\n    Rinkeby = '0x4',\n    Goerli = '0x5',\n    Custom = '0x539'\n}\n\nexport enum NetworkNameType {\n    '0x1' = 'Mainnet',\n    '0x3' = 'Ropsten',\n    '0x2a' = 'Kovan',\n    '0x4' = 'Rinkeby',\n    '0x5' = 'Goerli',\n    '0x539' = 'Custom'\n}\n","export function isMetaMaskInstalled(): boolean {\n    return Boolean(window['ethereum'] && window['ethereum'].isMetaMask);\n}\n","import Web3 from 'web3';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {Constructor} from '../models/helper-types/constructor.type';\nimport {NetworkType} from '../enums/network-type.enum';\nimport {BaseContract} from '../models/base.contract';\n\nexport class EthereumService {\n    public static instance: EthereumService;\n\n    private readonly ETHEREUM: any;\n    private readonly WEB3: Web3;\n\n    private _account: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get account(): Observable<string> {\n        return this._account.asObservable();\n    }\n\n    private _chain: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get chain(): Observable<string> {\n        return this._chain.asObservable();\n    }\n\n    private _network: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get network(): Observable<string> {\n        return this._network.asObservable();\n    }\n\n    private _isReady: ReplaySubject<boolean> = new ReplaySubject();\n\n    public get isReady(): Observable<boolean> {\n        return this._isReady.asObservable();\n    }\n\n    public get isTestNetwork(): boolean {\n        return this.ETHEREUM.chainId === NetworkType.Ropsten;\n    }\n\n    constructor(ethereum: any) {\n        if (isMetaMaskInstalled()) {\n            this.ETHEREUM = ethereum;\n            this.WEB3 = new Web3(this.ETHEREUM);\n            this._network.next(this.ETHEREUM.networkVersion);\n            this.ETHEREUM.request({method: 'eth_chainId'})\n                .then((chain: string) => {\n                    this._chain.next(chain);\n                    return this.ETHEREUM.request({method: 'eth_requestAccounts'});\n                })\n                .then(([account]: Array<string>) => {\n                    this._account.next(account);\n                    this._isReady.next(true);\n                    this.ETHEREUM.on('accountsChanged', ([account]: [string]) => this._onAccountChange(account));\n                    this.ETHEREUM.on('chainChanged', (chain: string) => this._onChainChange(chain));\n                    this.ETHEREUM.on('networkChanged', (network: string) => this._network.next(network));\n                });\n        }\n    }\n\n    public static getInstance(): EthereumService {\n        if (isMetaMaskInstalled()) {\n            if (!EthereumService.instance) {\n                EthereumService.instance = new EthereumService(window['ethereum']);\n            }\n            return EthereumService.instance;\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n\n    public contractFactory<T extends BaseContract>(contractConstructor: Constructor<T & BaseContract>): T & BaseContract {\n        return new contractConstructor(this.WEB3, this._network.getValue());\n    }\n\n    private _onAccountChange(account: string): void {\n        this._isReady.next(false);\n        this.ETHEREUM.enable()\n            .then(() => this._account.next(account))\n            .then(() => this._isReady.next(true));\n    }\n\n    private _onChainChange(chain: string): void {\n        this._isReady.next(false);\n        this.ETHEREUM.enable()\n            .then(() => this._chain.next(chain))\n            .then(() => this.WEB3.eth.getAccounts())\n            .then(([account]: Array<string>) => this._account.next(account))\n            .then(() => this._isReady.next(true));\n    }\n}\n","import {AbiItem} from 'web3-utils';\nimport Web3 from 'web3';\n\nimport DecentagramAbi from '../abis/Decentagram.json';\nimport {BaseContract} from './base.contract';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\n\nexport class DecentagramContract extends BaseContract {\n    constructor(web3: Web3, network: string) {\n        if (!isMetaMaskInstalled()) {\n            throw new Error('Meta Mask is not installed');\n        }\n\n        const abi: AbiItem[] = DecentagramAbi.abi as AbiItem[];\n        const address: string = DecentagramAbi.networks[network];\n        console.log(address);\n        if (address && abi) {\n            super(web3, abi, address);\n        } else {\n            throw new Error('Decentagram contract not deployed to detected network.');\n        }\n    }\n}\n","import {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport Web3 from 'web3';\nimport {AbiItem} from 'web3-utils';\n\n//TODO: implement contract inheritance\nexport abstract class BaseContract {\n    protected constructor(web3: Web3, abi: AbiItem[], address: string) {\n        if (isMetaMaskInstalled()) {\n            Object.assign(this, new web3.eth.Contract(abi, address));\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n}\n","import {Fragment, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport {Subscription} from 'rxjs';\nimport {withLatestFrom} from 'rxjs/operators';\n\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {EthereumService} from '../services/ethereum.service';\nimport {DecentagramContract} from '../models/decentagram.contract';\n\nexport function MainComponent(): FunctionComponentElement<any> {\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const [account, setAccount]: UseState<string> = useState('');\n    const [error, setError]: UseState<Error> = useState(null);\n    const [chain, setChain]: UseState<string> = useState('');\n    const decentagramContract: DecentagramContract = useMemo(\n        () => {\n            try {\n                return ethereumService.contractFactory(DecentagramContract);\n            } catch (e) {\n                setError(e);\n            }\n        }, [ethereumService]);\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.chain\n            .pipe(withLatestFrom(ethereumService.account))\n            .subscribe(([chain, account]: [string, string]) => {\n                setChain(chain);\n                setAccount(account);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    if (error && !decentagramContract) {\n        return (\n            <div className=\"row  justify-content-center\">\n                {error.message}\n            </div>\n        );\n    }\n\n    return (\n        <Fragment>\n            <div className=\"row  justify-content-center\">\n                Chain:{chain}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Account: {account}\n            </div>\n        </Fragment>\n    );\n}\n","import {Subscription} from 'rxjs';\nimport {FunctionComponentElement, useEffect, useMemo, useState} from 'react';\n\nimport {EthereumService} from '../services/ethereum.service';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {MainComponent} from './main.component';\nimport {NetworkNameType, NetworkType} from '../enums/network-type.enum';\n\nexport function AppComponent(): FunctionComponentElement<any> {\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const [loading, setLoading]: UseState<boolean> = useState(true);\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.isReady\n            .subscribe((isReady: boolean) => {\n                setLoading(!isReady);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    if (!isMetaMaskInstalled()) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Please Install MetaMask\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Loading...\n            </div>\n        );\n    }\n\n\n    if (!ethereumService.isTestNetwork) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Please Select {NetworkNameType[NetworkType.Ropsten]} Network\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"py-5\">\n            <div className=\"container bg-light py-5\">\n                <MainComponent/>\n            </div>\n        </div>\n    );\n}\n","import {render} from 'react-dom';\n\nimport {AppComponent} from './components/app.component';\n\nimport './assets/styles/styles.scss';\n\nrender(<AppComponent/>, document.getElementById('root'));\n"],"sourceRoot":""}