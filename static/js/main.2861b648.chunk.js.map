{"version":3,"sources":["helpers/meta-mask.helper.ts","services/ethereum.service.ts","models/base.contract.ts","models/decentagram.contract.ts","components/main.component.tsx","components/app.component.tsx","index.tsx"],"names":["isMetaMaskInstalled","Boolean","window","isMetaMask","EthereumService","ethereum","ETHEREUM","WEB3","_account","BehaviorSubject","undefined","_balance","_network","_isReady","ReplaySubject","this","Web3","_init","then","on","asObservable","contractConstructor","getValue","next","enable","eth","getBalance","selectedAddress","balance","Number","utils","fromWei","networkVersion","getInstance","Contract","instance","Error","BaseContract","abi","address","getContractConstructor","DecentagramContract","network","DecentagramJSON","networks","MainComponent","useState","account","setAccount","setNetwork","setBalance","ethereumService","useMemo","decentagramContract","contractFactory","e","useEffect","subscription","pipe","withLatestFrom","subscribe","unsubscribe","className","AppComponent","loading","setLoading","isReady","render","document","getElementById"],"mappings":"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","file":"static/js/main.2861b648.chunk.js","sourcesContent":["export function isMetaMaskInstalled(): boolean {\n    return Boolean(window['ethereum'] && window['ethereum'].isMetaMask);\n}\n","import Web3 from 'web3';\nimport {provider} from 'web3-core';\nimport {Contract} from 'web3-eth-contract';\nimport {BehaviorSubject, Observable, ReplaySubject} from 'rxjs';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {Constructor} from '../models/helper-types/constructor.type';\nimport {BaseContract} from '../models/base.contract';\n\nexport class EthereumService {\n    public static instance: EthereumService;\n    private readonly ETHEREUM: any;\n    private readonly WEB3: Web3;\n\n    private _account: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get account(): Observable<string> {\n        return this._account.asObservable();\n    }\n\n    private _balance: BehaviorSubject<number> = new BehaviorSubject(undefined);\n\n    public get balance(): Observable<number> {\n        return this._balance.asObservable();\n    }\n\n    private _network: BehaviorSubject<string> = new BehaviorSubject(undefined);\n\n    public get network(): Observable<string> {\n        return this._network.asObservable();\n    }\n\n    private _isReady: ReplaySubject<boolean> = new ReplaySubject();\n\n    public get isReady(): Observable<boolean> {\n        return this._isReady.asObservable();\n    }\n\n    constructor(ethereum: provider) {\n        if (isMetaMaskInstalled()) {\n            this.ETHEREUM = ethereum;\n            this.WEB3 = new Web3(this.ETHEREUM);\n            this._init()\n                .then(() => {\n                    this.ETHEREUM.on('accountsChanged', () => this._init());\n                    this.ETHEREUM.on('networkChanged', () => this._init());\n                });\n        }\n    }\n\n    public static getContractConstructor(): Constructor<Contract> {\n        return EthereumService.getInstance().WEB3.eth.Contract;\n    };\n\n    public static getInstance(): EthereumService {\n        if (isMetaMaskInstalled()) {\n            if (!EthereumService.instance) {\n                EthereumService.instance = new EthereumService(window['ethereum'] as provider);\n            }\n            return EthereumService.instance;\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n\n    public contractFactory<T extends BaseContract>(contractConstructor: Constructor<T & BaseContract>): T & BaseContract {\n        return new contractConstructor(this._network.getValue());\n    }\n\n    private _init(): Promise<void> {\n        this._isReady.next(false);\n        return this.ETHEREUM.enable()\n            .then(() => this.WEB3.eth.getBalance(this.ETHEREUM.selectedAddress))\n            .then((balance: string) => {\n                this._account.next(this.ETHEREUM.selectedAddress);\n                this._balance.next(Number(this.WEB3.utils.fromWei(balance, 'ether')));\n                this._network.next(this.ETHEREUM.networkVersion);\n                this._isReady.next(true);\n            });\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {EthereumService} from '../services/ethereum.service';\n\nexport abstract class BaseContract extends EthereumService.getContractConstructor() {\n    protected constructor(abi: AbiItem[], address: string) {\n        if (isMetaMaskInstalled()) {\n            super(abi, address);\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n}\n","import {AbiItem} from 'web3-utils';\n\nimport {BaseContract} from './base.contract';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\n\nimport DecentagramJSON from '../abis/Decentagram.json';\n\nexport class DecentagramContract extends BaseContract {\n    constructor(network: string) {\n        if (!isMetaMaskInstalled()) {\n            throw new Error('Meta Mask is not installed');\n        }\n\n        const abi: AbiItem[] = DecentagramJSON.abi as AbiItem[];\n        const address: string = DecentagramJSON.networks[network];\n        if (address && abi) {\n            super(abi, address);\n        } else {\n            throw new Error('Decentagram contract not deployed to detected network.');\n        }\n    }\n}\n","import {Fragment, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport {Subscription} from 'rxjs';\nimport {withLatestFrom} from 'rxjs/operators';\n\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {EthereumService} from '../services/ethereum.service';\nimport {DecentagramContract} from '../models/decentagram.contract';\n\nexport function MainComponent(): FunctionComponentElement<any> {\n    const [account, setAccount]: UseState<string> = useState('');\n    const [network, setNetwork]: UseState<string> = useState('');\n    const [balance, setBalance]: UseState<number> = useState(0);\n\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const decentagramContract: DecentagramContract = useMemo(() => {\n            try {\n                return ethereumService.contractFactory(DecentagramContract);\n            } catch (e) {\n                return null;\n            }\n        },\n        [ethereumService]\n    );\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.account\n            .pipe(withLatestFrom(ethereumService.network, ethereumService.balance))\n            .subscribe(([account, network, balance]: [string, string, number]) => {\n                setAccount(account);\n                setNetwork(network);\n                setBalance(balance);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    const getContractActions = () => {\n        if (!decentagramContract) {\n            return (\n                <div className=\"row  justify-content-center\">\n                    Decentagram contract not deployed to detected network.\n                </div>\n            );\n        }\n\n        return (\n            <div className=\"row  justify-content-center\">\n                Good\n            </div>\n        );\n    };\n\n    return (\n        <Fragment>\n            <div className=\"row  justify-content-center\">\n                Network: {network}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Account: {account}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Balance: {balance} ETH\n            </div>\n            {getContractActions()}\n        </Fragment>\n    );\n}\n","import {Subscription} from 'rxjs';\nimport {FunctionComponentElement, useEffect, useMemo, useState} from 'react';\n\nimport {EthereumService} from '../services/ethereum.service';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {MainComponent} from './main.component';\n\nexport function AppComponent(): FunctionComponentElement<any> {\n    const [loading, setLoading]: UseState<boolean> = useState(true);\n\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.isReady\n            .subscribe((isReady: boolean) => {\n                setLoading(!isReady);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    if (!isMetaMaskInstalled()) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Please Install MetaMask\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Loading...\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"py-5\">\n            <div className=\"container bg-light py-5\">\n                <MainComponent/>\n            </div>\n        </div>\n    );\n}\n","import {render} from 'react-dom';\n\nimport {AppComponent} from './components/app.component';\n\nimport './assets/styles/styles.scss';\n\nrender(<AppComponent/>, document.getElementById('root'));\n"],"sourceRoot":""}