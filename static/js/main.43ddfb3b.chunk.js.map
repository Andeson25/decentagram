{"version":3,"sources":["enums/network-type.enum.ts","helpers/meta-mask.helper.ts","services/ethereum.service.ts","components/main.component.tsx","components/app.component.tsx","index.tsx"],"names":["NetworkType","NetworkNameType","isMetaMaskInstalled","Boolean","window","isMetaMask","EthereumService","ethereum","ETHEREUM","WEB3","_account","ReplaySubject","_chain","_isReady","this","Web3","request","method","then","chain","next","account","on","_onAccountChange","_onChainChange","asObservable","chainId","Ropsten","contractConstructor","enable","eth","getAccounts","instance","Error","MainComponent","ethereumService","useMemo","getInstance","useState","setAccount","setChain","useEffect","subscription","pipe","withLatestFrom","subscribe","unsubscribe","className","AppComponent","loading","setLoading","isReady","isTestNetwork","render","document","getElementById"],"mappings":"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","file":"static/js/main.43ddfb3b.chunk.js","sourcesContent":["export enum NetworkType {\n    Mainnet = '0x1',\n    Ropsten = '0x2',\n    Kovan = '0x3',\n    Rinkeby = '0x4',\n    Goerli = '0x5',\n    Custom = '0x6'\n}\n\nexport enum NetworkNameType {\n    '0x1' = 'Mainnet',\n    '0x2' = 'Ropsten',\n    '0x3' = 'Kovan',\n    '0x4' = 'Rinkeby',\n    '0x5' = 'Goerli',\n    '0x6' = 'Custom'\n}\n","export function isMetaMaskInstalled(): boolean {\n    return Boolean(window['ethereum'] && window['ethereum'].isMetaMask);\n}\n","import Web3 from 'web3';\nimport {Observable, ReplaySubject} from 'rxjs';\n\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {Constructor} from '../models/helper-types/constructor.type';\nimport {NetworkType} from '../enums/network-type.enum';\n\nexport class EthereumService {\n    public static instance: EthereumService;\n\n    private readonly ETHEREUM: any;\n    private readonly WEB3: Web3;\n    private _account: ReplaySubject<string> = new ReplaySubject();\n    private _chain: ReplaySubject<string> = new ReplaySubject();\n\n    private _isReady: ReplaySubject<boolean> = new ReplaySubject();\n\n    public get account(): Observable<string> {\n        return this._account.asObservable();\n    }\n\n    public get isReady(): Observable<boolean> {\n        return this._isReady.asObservable();\n    }\n\n    public get chain(): Observable<string> {\n        return this._chain.asObservable();\n    }\n\n    public get isTestNetwork(): boolean {\n        return this.ETHEREUM.chainId === NetworkType.Ropsten;\n    }\n\n    constructor(ethereum: any) {\n        if (isMetaMaskInstalled()) {\n            this.ETHEREUM = ethereum;\n            this.WEB3 = new Web3(this.ETHEREUM);\n            this.ETHEREUM.request({method: 'eth_chainId'})\n                .then((chain: string) => {\n                    this._chain.next(chain);\n                    return this.ETHEREUM.request({method: 'eth_requestAccounts'});\n                })\n                .then(([account]: Array<string>) => {\n                    this._account.next(account);\n                    this._isReady.next(true);\n                    this.ETHEREUM.on('accountsChanged', ([account]: [string]) => this._onAccountChange(account));\n                    this.ETHEREUM.on('chainChanged', (chain: string) => this._onChainChange(chain));\n                });\n        }\n    }\n\n    public static getInstance(): EthereumService {\n        if (isMetaMaskInstalled()) {\n            if (!EthereumService.instance) {\n                EthereumService.instance = new EthereumService(window['ethereum']);\n            }\n            return EthereumService.instance;\n        } else {\n            throw new Error('Meta Mask is not installed');\n        }\n    }\n\n    public contractFactory<T>(contractConstructor: Constructor<T>): T {\n        return new contractConstructor(this.WEB3);\n    }\n\n    private _onAccountChange(account: string): void {\n        this._isReady.next(false);\n        this.ETHEREUM.enable()\n            .then(() => this._account.next(account))\n            .then(() => this._isReady.next(true));\n    }\n\n    private _onChainChange(chain: string): void {\n        this._isReady.next(false);\n        this.ETHEREUM.enable()\n            .then(() => this._chain.next(chain))\n            .then(() => this.WEB3.eth.getAccounts())\n            .then(([account]: Array<string>) => this._account.next(account))\n            .then(() => this._isReady.next(true));\n    }\n}\n","import {Fragment, FunctionComponentElement, useEffect, useMemo, useState} from 'react';\nimport {Subscription} from 'rxjs';\nimport {withLatestFrom} from 'rxjs/operators';\n\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {EthereumService} from '../services/ethereum.service';\n\nexport function MainComponent(): FunctionComponentElement<any> {\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const [account, setAccount]: UseState<string> = useState('');\n    const [chain, setChain]: UseState<string> = useState('');\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.chain\n            .pipe(withLatestFrom(ethereumService.account))\n            .subscribe(([chain, account]: [string, string]) => {\n                setChain(chain);\n                setAccount(account);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    return (\n        <Fragment>\n            <div className=\"row  justify-content-center\">\n                Chain:{chain}\n            </div>\n            <div className=\"row  justify-content-center\">\n                Account: {account}\n            </div>\n        </Fragment>\n    );\n}\n","import {Subscription} from 'rxjs';\nimport {FunctionComponentElement, useEffect, useMemo, useState} from 'react';\n\nimport {EthereumService} from '../services/ethereum.service';\nimport {isMetaMaskInstalled} from '../helpers/meta-mask.helper';\nimport {UseState} from '../models/helper-types/use-state.type';\nimport {MainComponent} from './main.component';\nimport {NetworkNameType, NetworkType} from '../enums/network-type.enum';\n\nexport function AppComponent(): FunctionComponentElement<any> {\n    const ethereumService: EthereumService = useMemo(() => EthereumService.getInstance(), []);\n    const [loading, setLoading]: UseState<boolean> = useState(true);\n\n    useEffect(() => {\n        const subscription: Subscription = ethereumService.isReady\n            .subscribe((isReady: boolean) => {\n                setLoading(!isReady);\n            });\n        return () => {\n            subscription.unsubscribe();\n        };\n    });\n\n    if (!isMetaMaskInstalled()) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Please Install MetaMask\n            </div>\n        );\n    }\n\n    if (loading) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Loading...\n            </div>\n        );\n    }\n\n\n    if (!ethereumService.isTestNetwork) {\n        return (\n            <div className=\"container bg-light my-5 px-5 py-3 text-center\">\n                Please Select {NetworkNameType[NetworkType.Ropsten]} Network\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"py-5\">\n            <div className=\"container bg-light py-5\">\n                <MainComponent/>\n            </div>\n        </div>\n    );\n}\n","import {render} from 'react-dom';\n\nimport {AppComponent} from './components/app.component';\n\nimport './assets/styles/styles.scss';\n\nrender(<AppComponent/>, document.getElementById('root'));\n"],"sourceRoot":""}